<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://dbonattoj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dbonattoj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-27T21:26:50+01:00</updated><id>https://dbonattoj.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Inquiry-Based Learning - Navigating the Path to Deep Understanding in Class</title><link href="https://dbonattoj.github.io/blog/2024/inquiry-based-learning/" rel="alternate" type="text/html" title="Inquiry-Based Learning - Navigating the Path to Deep Understanding in Class"/><published>2024-12-08T22:18:00+01:00</published><updated>2024-12-08T22:18:00+01:00</updated><id>https://dbonattoj.github.io/blog/2024/inquiry-based-learning</id><content type="html" xml:base="https://dbonattoj.github.io/blog/2024/inquiry-based-learning/"><![CDATA[<p>The Moore method, introduced in 1911 at the University of Pennsylvania, is widely regarded as a rigorous and demanding approach to learning advanced mathematics.</p> <p>Under this method, students are provided with a list of definitions and tasked with independently proving and presenting theorems based solely on these foundational concepts. While this approach fosters a profound understanding of the material, it progresses slowly. Students build the subject matter incrementally, proof by proof, which often results in covering less material compared to traditional classes.</p> <p>The method is notable for its ability to cultivate deep mastery. However, the process is exceptionally challenging. Proving theorems is inherently difficult, especially for students with no prior exposure to the subject. Progress feels painstakingly slow, advancing step by step, with the sense that completion is perpetually out of reach. Unsurprisingly, this method was widely disliked by students, yet it consistently produced exceptional mathematicians.</p> <p>One of the method’s strictest requirements was that students could not have prior familiarity with the material. All understanding had to be earned through their own efforts, ensuring a genuine engagement with the subject.</p> <p>In summary, despite its effectiveness, the extreme rigor and difficulty of the Moore method made it an approach that many students found unbearable.</p> <p>It’s not certain that the Moore method is the best way to train mathematicians. While being stuck on a proof or exercise for days is when we learn the most, it can also become counterproductive. Occasionally, a small glimpse at the key steps of a proof can provide the clarity needed to move forward, particularly when the solution relies on an unconventional or intricate <em>trick</em>. Discovering such a <em>trick</em> independently is highly unlikely without spending countless hours working on the problem and similar ones. However, being introduced to the <em>trick</em>, understanding it, and integrating it into one’s problem-solving toolbox can be profoundly empowering. For it to truly become part of one’s expertise, the <em>trick</em> must be understood in context, analyzed for its effectiveness, and practiced repeatedly until mastered. Of course, it is crucial to do the work independently and avoid seeing the solution directly, as mastery cannot be achieved otherwise.</p> <p>I believe that a balanced approach - combining independent problem-solving with guided hints or insights when needed may be the fastest path to master ones craft.</p> <p>However, the challenge lies in discerning when reading the proof is helpful and when it is detrimental. A student learning new material often cannot differentiate between a genuine trick and a solution that simply requires perseverance. Reading a solution prematurely risks undermining the learning process, reducing a valuable insight to a mere trick without understanding the effort behind it, and the student will use the trick without fully understanding it, creating gaps in its understanding and mental models. Conversely, when encountering a legitimate trick, the student may lack the tools to grasp its significance fully.</p> <p>In this context, the role of the teacher becomes critical. A knowledgeable teacher can distinguish between instances where independent problem-solving is essential and moments when a hint or demonstration of a trick is warranted. By carefully guiding students through exercises and proofs - alternating between asking them to work independently and providing well-timed hints - teachers can ensure students build both resilience and a deep understanding of the material.</p> <p>In recent years, I’ve observed a resurgence of the Moore method, adapted and rebranded under the name “inquiry-based learning.” [3] This modern variation often uses textbooks as the medium, incorporating modifications that make the approach more accessible. Unlike the original Moore method, these books provide more than just definitions and axioms; they guide students in developing problem-solving strategies. For example, an exercise might present a partially completed proof with missing steps for the student to fill in. These gaps are carefully aligned with concepts recently introduced, ensuring that students build intuition, develop strategies, and even acquire specific techniques before tackling more complex theorems.</p> <p>I’ve particularly appreciated this approach in Lebesgue Integration on Euclidean Space by Frank Jones [4], which covers measure theory in a spectacular way, providing an enormous amount of intuition, even though the subject is traditionally very dry. I also appreciated Topology Through Inquiry by Francis Su [5]. I found it more similar to the Moore method than inquiry-based learning. Francis Su is an amazing teacher, and his video lectures on real analysis are an excellent resource [6]. However, one significant limitation of these texts is their assumption of a baseline level of knowledge. While prerequisites are inevitable, mathematics can be approached in countless ways, and few readers have mastered all the foundational material a given author might consider essential.</p> <p>I specifically recall getting stuck on a routine exercise involving dyadic rationals and their finite binary representation in the measure theory text. While I understood the motivation for introducing such sets and the measure being constructed, handling these unfamiliar entities caused me to get bogged down by technicalities for longer than I care to admit, delaying my progress on the core subject. These stumbling blocks can hinder the effectiveness of inquiry-based methods. Missing prerequisites or the absence of a teacher to provide guidance can discourage students from continuing.</p> <p>Addressing this challenge comprehensively would require an inquiry-based book that begins from absolute zero, covering all prerequisites in the same style. However, this approach would likely result in a massive volume, daunting for beginners, as their progress would be painfully slow compared to the thickness of the volume, and tedious for more advanced readers due to its slow initial pace. Balancing accessibility and depth in an inquiry-based framework remains a significant challenge for educators and authors alike.</p> <p>These principles guide my current teaching approach, a customized inquiring-based learning approach for my needs. In a university setting, the challenge lies in balancing two conflicting expectations: fostering competent, skilled students with deep understanding while simultaneously covering a vast quantity of material. Designing an inquiry-based, interactive class often clashes with institutional expectations, as the focus on deep mastery can slow the pace of covering content.</p> <p>I’ve had the opportunity to work with students from diverse academic backgrounds, all of whom were ultimately required to master the same material. This diversity made it impossible to assume extensive prior knowledge, prompting me to experiment with these ideas in my teaching. I began my lessons with minimal background knowledge, guiding students step by step toward the core concepts. This approach was notably slow at first, as I invested time in defining foundational concepts and leading students through carefully crafted questions on the more challenging parts.</p> <p>The idea is that straightforward foundational material can usually be understood with clear explanations and requires little practice. However, more intricate concepts benefit from guided inquiry. Instead of providing solutions outright, I posed a series of logically connected questions designed to lead students to the solution. It was very interesting, this approach mirrors the spirit of inquiry-based learning: students feel as though they are constructing the material themselves. Many were amazed to realize how the theory seemed to emerge naturally from their own discoveries.</p> <p>Guiding this process is a nuanced skill. Students often propose ideas in class, and I must quickly evaluate their suggestions, explaining why they work or don’t. More often, I frame questions that enable them to critique and refine their own ideas, without giving the solution. This dynamic, interactive process keeps them engaged and allow a deeper understanding of the material.</p> <p>Although this process begins slowly, it accelerates as the material progresses. I observed students naturally handling increasingly complex problems and gaining expertise in the subject. Their mindset shifted from “I need to study this course for my credits” to “I’m a theory builder.” To my surprise, we ultimately covered more material than expected. Despite the growing complexity of the topics, their intrinsic motivation to understand and their newly developed problem-solving reflexes allowed them to tackle in-class challenges and construct theories as if they were the discoverers of the subject for the first time.</p> <p>As the lessons advanced, students began asking more insightful questions, particularly on challenging topics. At one point, they even identified the boundaries of the current state-of-the-art. It was an amazing moment. The realization that there is still much to explore, combined with their confidence in proposing and investigating potential solutions, was both empowering for them and inspiring for me as an educator.</p> <p>This journey is still in its early stages, and there is much left to explore. I found that the most challenging aspect wasn’t delivering lectures or guiding students but creating high-quality materials that allow them to follow the ideas in a fast-paced and engaging way.</p> <p>The slides were designed so that every question presented was addressed during class, with those questions being pivotal to understanding the material. At the same time, the subsequent slides needed to align with the solutions proposed by the students. This implies two things: first, anticipating the directions students might take during discussions to ensure that the following slides reflected the mental models they developed, in particular with beautiful schematic summarizing the in-class discussion; second, subtly guiding them toward the solution presented in the slides.</p> <p>Dismissing incorrect ideas was relatively straightforward, as I could typically craft a counterexample and pose it to the class (sometimes even turning it into a vote on whether the idea holds and why). However, when students presented strong alternative solutions that didn’t align exactly with the slides, the discussions became particularly enriching, especially when mapping their ideas to the intended solution.</p> <p>After each session, I revised the slides to incorporate these discussions and add any missing visualizations or mental models we created together on the blackboard. While I don’t expect students to revisit the slides - the core ideas should already be clear from class - they serve as a valuable resource for future learners, offering improved clarity and representation of key concepts.</p> <p>Creating this type of material is incredibly time-consuming. Fortunately, I’ve discovered other educators worldwide who produce similar high-quality slides on related topics (see Notes [1]). Their work has been an invaluable source of inspiration, whether they consciously follow the principles I describe here or simply intuit that this approach enhances teaching. Regardless, these resources contribute to exceptional material available online, and I hope promotes a new generation of students who truly master the material and develop a genuine passion for the presented material, and overall for learning.</p> <p>References:</p> <ol> <li>Zitarelli, David, 2004. The Origin and Early Impact of the Moore Method, American Mathematical Monthly 111: 465–486.</li> <li>Jones, F. Burton, 1977, “The Moore method,” American Mathematical Monthly 84: 273–77</li> <li><a href="http://www.ceebl.manchester.ac.uk/ebl/">“What is Inquiry-Based Learning (EBL)?”</a>. Centre for Excellence in Enquiry-Based Learning. University of Manchester.</li> <li>Lebesgue Integration on Euclidean Space, Frank Jones, Jones &amp; Bartlett Learning, 2000.</li> <li>Topology Through Inquiry, Michael Starbird and Francis Su, AMS, 2019.</li> <li>Francis Su’s video lectures on real analysis: <a href="https://www.youtube.com/watch?v=sqEyWLGvvdw&amp;list=PL0E754696F72137EC">YouTube Playlist</a>.</li> </ol> <p>Notes:</p> <ol> <li>Two universities where I encountered this style done exceptionally well in different lectures are Carnegie Mellon University and Stanford, both of which were significant sources of inspiration for me.</li> </ol>]]></content><author><name></name></author><category term="education"/><category term="Education"/><summary type="html"><![CDATA[This article delves into the transformative Moore Method, a teaching approach that challenges students to independently discover mathematical truths. Through a modified version of the method, which emphasizes student-driven inquiry and problem-solving, the article explores how it fosters deep mastery while presenting significant challenges. It also examines the effectiveness, limitations, and lessons learned from applying this method in the classroom, alongside reflections on the role of high-quality teaching materials and the evolving student mindset.]]></summary></entry><entry><title type="html">The Evolution of Scientific Curiosity - From Triangles to Gaussians in Graphics</title><link href="https://dbonattoj.github.io/blog/2024/evolution-of-gaussian-splatting/" rel="alternate" type="text/html" title="The Evolution of Scientific Curiosity - From Triangles to Gaussians in Graphics"/><published>2024-11-05T22:18:00+01:00</published><updated>2024-11-05T22:18:00+01:00</updated><id>https://dbonattoj.github.io/blog/2024/evolution-of-gaussian-splatting</id><content type="html" xml:base="https://dbonattoj.github.io/blog/2024/evolution-of-gaussian-splatting/"><![CDATA[<h1 id="prelude">Prelude</h1> <p>Science evolves in fascinating and often unexpected ways. Consider this: someone begins with a simple question, perhaps sparked by curiosity - “Why does light behave strangely through this object?” - a playful thought experiment - “What’s the optimal way to cut a cake?” - or a practical need - “I have a list; how can I efficiently order it?”</p> <p>At first glance, the question seems straightforward. “This should be easy to solve,” they think. Hours turn into days, months, or even years, and with persistence, some insights may emerge. If they are a scientist, they publish their findings. Even if no solution is reached, they might write a research article detailing why the problem is more complex than it initially appeared and why others should care about it.</p> <p>(Much) later, someone else with the right background might solve the problem effortlessly, by inadvertance sometimes. They may not even publish their solution, or they might share it if sufficiently motivated. More often, the problem remains unsolved for a long time. Yet, this does not imply stagnation. Some mathematical problems have taken centuries to resolve. Along the way, new methods are developed, old ones are rediscovered, and the problem is dissected into numerous sub-problems, each analyzed with a diverse set of tools.</p> <p>Through this process, insights accumulate - not just for individuals but for the entire scientific community working within the field. Even if the original question remains unresolved, the collective understanding deepens. From a researcher’s perspective, or that of a science journalist, this process might appear to generate a flood of minor papers that seem like noise around the central question. However, this ‘noise’ is crucial, as it facilitates exploration and allows meaningful trends to emerge.</p> <p>But what exactly constitutes a “field” of scientists? Broadly speaking, it is a community of researchers working on the same subject, striving to develop a shared understanding of their discipline’s “important problems.” It is crucial to note, however, that the definition of “important” evolves over time, often shaped by shifting priorities or trends within the field. Research is inherently a social endeavor; a charismatic scientist can steer focus toward new directions through sheer influence, while equally significant contributions from less prominent researchers may remain overlooked.</p> <p>In an ideal world, the social dynamics of science would be absent, enabling progress to focus solely on genuinely important problems and reducing noise. Yet, without the social aspect, how would we even begin to define what is important? And without the noise, how would the emergence of trends become visible?</p> <p>Another aspect of scientific research is that a problem may gain prominence in a community as more researchers recognize its significance, only to fade into relative obscurity a decade later once solutions are found and its relevance diminishes.</p> <h1 id="triangle-based-geometry">Triangle-based Geometry</h1> <p>One successful and interesting field of science is Computer graphics. For a long time, computer graphics have revolved around the use of triangles as fundamental primitives, with significant research dedicated to manipulating these geometric shapes. GPUs were initially designed to handle triangles with maximum efficiency, inspiring the creation of algorithms to compute lighting on triangular meshes [1]. This foundation gave rise to modern computer graphics, where triangles dominated everything from game development [2] to rendering pipelines [3-5]. This focus also led to the development of discrete differential geometry [6], which studies continuous mathematical functions defined over discrete meshes. This field enabled more advanced manipulations of triangles, laying the groundwork for software like Blender [7], where users can paint, deform, and compute integrals and divergences on triangle-based meshes.</p> <p>However, triangles alone often fail to produce photorealistic results. While they can approximate reality in some cases, they frequently betray the artificial nature of a virtual scene. To address this, a parallel line of research emerged, focusing on ray tracing [8] - a method that still uses triangles to represent scenes but prioritizes simulating the behavior of light. Ray tracing involves tracing light rays from the screen, calculating their intersections with objects, and accounting for effects such as reflection and refraction. When a ray intersects with a light source, the light’s influence is propagated backward along the ray’s path, following physics-based equations. This process, while producing highly realistic results, is computationally expensive, as every ray must be calculated individually, and each interaction with an object can spawn additional rays.</p> <p>One key advantage of triangle-based methods is their ability to associate materials with meshes. This allows ray tracing to simulate complex interactions, such as light refracting through glass. Rays passing through transparent materials interact with objects behind them, propagating color and light properties to the transparent surface, resulting in strikingly realistic visuals. Without ray tracing, such effects are nearly impossible to replicate accurately, which underscores why this method yields superior graphical results.</p> <p>Fortunately, recent advancements in GPU technology have incorporated ray tracing primitives and optimized hardware for faster intersection calculations [9]. These innovations have made real-time ray-traced rendering achievable, revolutionizing the visual fidelity of interactive graphics.</p> <p>While ray tracing promises highly realistic results, it remains constrained by a fundamental limitation: the scenes are designed by artists. An artist can invest an enormous amount of time meticulously crafting a scene to appear as realistic as possible, but ultimately, it remains a single, handcrafted and fixed in time scene. Alternatively, they might opt for a non-realistic approach, enabling the creation of stylized games or imaginative movie worlds. However, this reliance on artistic interpretation highlights a shortcoming: the inability to capture reality as it truly is. A more desirable solution would be to directly capture reality rather than approximating it through an artistic lens.</p> <h1 id="point-clouds">Point Clouds</h1> <p>In parallel, point clouds emerged as a natural representation for real scenes due to their acquisition from scanners capable of capturing environments in tremendous detail. Other techniques, such as structure-from-motion, also generate point clouds using photography. However, point clouds have undergone an unfortunate evolution. While their use is widespread across various fields, particularly those requiring depth information, the data they provide is inherently limited. Sensors often produce point clouds as a collection of discrete points in space, lacking any inherent connectivity or topology.</p> <p>This absence of connectivity - no information about which points are linked - presents significant challenges for manipulating these primitives. Without this structure, rendering point clouds becomes impractical; points remain disjoint in space, making it impossible to compute light interactions between them. Consequently, a considerable effort has been devoted to solving this problem by reconstructing surfaces from point clouds, effectively adding the missing structure.</p> <p>Several methods have been developed to address this, with Poisson reconstruction [10] being among the most prominent. This approach attempts to infer and link the points to form a coherent surface. More recent advancements, including less-known work by the same author [11], have yielded similarly compelling results. While these methods are effective for solving many practical problems, the renderings they produce remain non-realistic.</p> <p>In parallel with triangle-based methods, point clouds captured the interest of a small group of researchers for over a decade. These researchers published articles, authored a book summarizing their findings [12], and explored the characteristics and limitations of point clouds. Instead of constructing a topology between points, they considered a different approach: what if points were rendered as larger primitives, effectively “splatting” them on the screen to eliminate gaps in the scene?</p> <p>This crude approximation initially resulted in pixelated renderings, but it resolved the issue of visible holes between points. Over time, larger points were replaced with shapes like squares and discs, and eventually ellipses that conformed to the curvature of the objects being represented. However, the underlying issue persisted: the points remained distinctly disjointed. To address this, researchers proposed replacing points with 2D Gaussians - each represented as a soft distribution, with maximum intensity or color at the center and decreasing transparency outward. Each Gaussian was oriented perpendicular to the surface, providing a smoother and more cohesive representation.</p> <p>Although this reintroduced gaps in the scene, it became a non-issue as the Gaussians blended seamlessly together. Normalizing the scene at the final stage ensured there were no remaining transparency artifacts, producing a visually cohesive representation.</p> <p>Lighting posed another challenge. In triangle-based graphics, Phong shading [1] interpolates normals across triangles to calculate lighting at each point of intersection. This concept was adapted for splats by defining normal fields over them and using these fields for lighting computations. Further refinements included computing Gaussians into screen space instead of projecting Gaussians from 3D space to the screen, accounting for the distortion caused by perspective projection. To mitigate aliasing, anisotropic filtering was applied. Additionally, parameters such as clipping values were introduced to create sharp edges at object boundaries, enhancing the realism of the rendered scenes.</p> <p>But then, this line of research largely faded away. The primary reason was the lack of hardware support - manipulating points proved significantly more challenging than handling triangles, despite their potential to deliver realistic scene quality and direct acquisition. While some attempts were made to develop custom FPGAs capable of rendering point clouds [13], and these showed promising results, the approach never gained traction with major hardware manufacturers, who were reaping substantial profits from triangle-based rendering.</p> <p>Points also presented significant challenges in terms of compression. Each point could have numerous associated parameters - such as color, principal axes, position, direction, and clipping planes - making storage complex and compression even harder. Accessing point data required sophisticated space-partitioning methods to optimize performance. Although efforts, particularly within the MPEG community [14], aimed to compress these primitives effectively (as certain industries continued to derive value from them), the lack of native hardware support limited broader adoption.</p> <p>The promise of points as primitives capable of rendering more realistic scenes was never fully realized. A major roadblock was the absence of effective raytracing algorithms for transparent objects. Point clouds are typically acquired through devices that struggle to capture depth information for transparent objects, or through photographic techniques, which also fail to provide depth for such surfaces. Without depth information, points lack material properties and can only represent opaque surfaces. This limitation made it impossible to accurately render transparent objects, stalling progress in the field for a considerable amount of time.</p> <p>Fast forward to recent developments: a group of researchers revived interest in point-based graphics [15]. Rather than modeling points as 2D Gaussians with an orientation, they proposed representing them as full 3D Gaussians. To account for light interactions varying with direction, they incorporated spherical basis functions, enabling dynamic light manipulation at each point, allowing light effects to change depending on direction. This approach offered a way to simulate effects like reflection and refraction, crucial for achieving transparent appearances.</p> <p>However, it is important to emphasize that this approach does not replace material points. Points inherently struggle to represent transparent materials accurately, as the capability to capture transparency remains limited. While reflections in the rendered results often appear convincing, refractions pose a more significant challenge, resembling a light field over a hypothetical surface rather than true physical refractions. Numerous other limitations of this scene representation model persist, which, though beyond the scope of this blog post, continue to present obstacles for the field.</p> <p>Currently, research efforts are focused on making scenes as realistic as possible and tackling these persistent challenges. Some approaches involve generating point clouds using physically based simulation techniques instead of capturing them [16], enabling the creation of transparent materials and simulate physics. Others aim to improve the acquisition methods for transparent objects or refine techniques for faking these effects more effectively. Prestigious conferences like SIGGRAPH Asia [17] and ICME [18] now feature dedicated sessions addressing these topics, highlighting the growing interest and progress in the field.</p> <p>Nevertheless, point-based graphics still face significant hurdles. Scenes built from points are far less manipulable than their triangle-based counterparts. Decades of research manpower have gone into triangle-based methods, putting point-based techniques far behind. Furthermore, there is no guarantee that hardware manufacturers will invest in point-based primitives, despite ongoing discussions within NVIDIA, Khronos, and MPEG groups.</p> <p>I am actively working on these challenges and am eager to witness how the field evolves in the coming years. Research progresses rapidly, yet it often feels frustratingly slow at the same time. Still, I find encouragement in the revival this field is experiencing, with novel ideas and perspectives that hold great promise for the future. Perhaps one day, this field will become mainstream—or it may fade into obscurity for another decade.</p> <p>References:</p> <ol> <li>Bui Tuong Phong, “Illumination for Computer Generated Pictures,” Comm. ACM, Vol 18(6):311-317, June 1975.</li> <li><a href="https://www.unrealengine.com/en-US">Unreal Engine</a></li> <li><a href="https://www.opengl.org/">OpenGL</a></li> <li><a href="https://www.vulkan.org/">Vulkan</a></li> <li><a href="https://developer.apple.com/metal/">Metal</a></li> <li>Keenan Crane; Max Wardetzky (November 2017). “A Glimpse into Discrete Differential Geometry”. Notices of the American Mathematical Society. 64 (10): 1153–1159. doi:10.1090/noti1578</li> <li><a href="https://www.blender.org/">Blender</a></li> <li>Matt Pharr, Wenzel Jakob, and Greg Humphreys. 2016. Physically Based Rendering: From Theory to Implementation (3rd. ed.). Morgan Kaufmann Publishers Inc., San Francisco, CA, USA.</li> <li><a href="https://developer.nvidia.com/rtx/ray-tracing">NVIDIA RT Cores</a></li> <li>Michael Kazhdan, Matthew Bolitho, and Hugues Hoppe. 2006. Poisson surface reconstruction. In Proceedings of the fourth Eurographics symposium on Geometry processing (SGP ‘06). Eurographics Association, Goslar, DEU, 61–70.</li> <li>Kazhdan, M., Chuang, M., Rusinkiewicz, S. and Hoppe, H. (2020), Poisson Surface Reconstruction with Envelope Constraints. Computer Graphics Forum, 39: 173-182. https://doi.org/10.1111/cgf.14077</li> <li>Markus Gross and Hanspeter Pfister. 2007. Point-Based Graphics. Morgan Kaufmann Publishers Inc., San Francisco, CA, USA.</li> <li>Tim Weyrich, Simon Heinzle, Timo Aila, Daniel B. Fasnacht, Stephan Oetiker, Mario Botsch, Cyril Flaig, Simon Mall, Kaspar Rohrer, Norbert Felber, Hubert Kaeslin, and Markus Gross. 2007. A hardware architecture for surface splatting. ACM Trans. Graph. 26, 3 (July 2007), 90–es. https://doi.org/10.1145/1276377.1276490</li> <li>Authors Ohji Nakagami, Sebastien Lasserre, Sugio Toshiyasu, Marius Preda, “White paper on G-PCC”, ISO/IEC JTC 1/SC 29/AG 03, 2023</li> <li>Bernhard Kerbl, Georgios Kopanas, Thomas Leimkuehler, and George Drettakis. 2023. 3D Gaussian Splatting for Real-Time Radiance Field Rendering. ACM Trans. Graph. 42, 4, Article 139 (August 2023), 14 pages. https://doi.org/10.1145/3592433</li> <li>Xie, Tianyi, Zong, Zeshun, Qiu, Yuxing, Li, Xuan, Feng, Yutao, Yang, Yin, &amp; Jiang, Chenfanfu. PhysGaussian: Physics-Integrated 3D Gaussians for Generative Dynamics. Retrieved from https://par.nsf.gov/biblio/10535780.</li> <li><a href="https://asia.siggraph.org/2024/">Siggraph Asia 2024</a></li> <li><a href="https://2025.ieeeicme.org/ss11-challenges-in-vision-with-non-lambertian-objects-segmentation-3d-reconstruction-and-rendering/">ICME 2025</a></li> </ol>]]></content><author><name></name></author><category term="publications"/><category term="GaussianSplatting"/><summary type="html"><![CDATA[This opinion piece explores the journey of scientific research, from the persistence of unsolved questions to the rise and fall of fields shaped by innovation and limitations. Using computer graphics as a lens, it examines how triangle-based methods and point-based graphics evolved, the social dynamics of research, and the challenges of balancing theoretical advancements with practical constraints.]]></summary></entry><entry><title type="html">Docker Dependency Magic - Unleashing sed to Tailor Your Packages</title><link href="https://dbonattoj.github.io/blog/2024/docker-sed/" rel="alternate" type="text/html" title="Docker Dependency Magic - Unleashing sed to Tailor Your Packages"/><published>2024-02-27T17:24:00+01:00</published><updated>2024-02-27T17:24:00+01:00</updated><id>https://dbonattoj.github.io/blog/2024/docker-sed</id><content type="html" xml:base="https://dbonattoj.github.io/blog/2024/docker-sed/"><![CDATA[<p>In the world of Docker workflows, situations arise where you find yourself in the familiar dance of cloning a Git repository, installing via CMake, or setting up a pip or Anaconda environment. Yet, the default packages don’t always align perfectly with your needs.</p> <p>To tackle this common dilemma, I often resort to a simple yet effective maneuver: using sed to gracefully replace specific text within someone else’s package in Docker. It’s not groundbreaking, but it’s a reliable technique that often gets overlooked.</p> <p>In this blog post, I share my go-to command – a straightforward sed line – making the process of adjusting packages in Docker a breeze.</p> <figure class="highlight"><pre><code class="language-dockerfile" data-lang="dockerfile"><span class="k">RUN </span>wget <span class="nt">-O</span> opencv.zip https://github.com/opencv/opencv/archive/refs/tags/4.5.5.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span> unzip opencv.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span> wget <span class="nt">-O</span> opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.5.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span> unzip opencv_contrib.zip

<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> build <span class="o">&amp;&amp;</span> <span class="nb">cd </span>build <span class="o">&amp;&amp;</span> <span class="se">\
</span> cmake <span class="nt">-DOPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>../opencv_contrib-4.5.5/modules ../opencv-4.5.5

<span class="k">RUN </span><span class="nb">cd </span>build <span class="o">&amp;&amp;</span> cmake <span class="nt">-Bbuild</span> <span class="nb">.</span> <span class="nt">-DCMAKE_BUILD_TYPE</span><span class="o">=</span>Release <span class="se">\
</span> <span class="nt">-DBUILD_TESTS</span><span class="o">=</span>OFF <span class="se">\
</span> <span class="nt">-DBUILD_PERF_TESTS</span><span class="o">=</span>OFF <span class="se">\
</span> <span class="nt">-DBUILD_EXAMPLES</span><span class="o">=</span>OFF <span class="se">\
</span> <span class="nt">-DBUILD_opencv_apps</span><span class="o">=</span>OFF

<span class="k">RUN </span><span class="nb">cd </span>build <span class="o">&amp;&amp;</span> cmake <span class="nt">--build</span> <span class="nb">.</span> <span class="nt">-j</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span> <span class="nt">--target</span> <span class="nb">install</span>

<span class="c"># [...git clone of another repository...]</span>

<span class="c"># Changing version of OpenCV in external package</span>

<span class="k">RUN </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/find_package(OpenCV 4\.2 REQUIRED)/find_package(OpenCV 4.5 REQUIRED)/g'</span> CMakeFile.txt

[...]

# Removing the use of pip in anaconda environment file

<span class="k">RUN </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/pip:/d'</span> environment.yml
<span class="k">RUN </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/- module_name/d'</span> environment.yml

<span class="c"># [...continue making...]</span></code></pre></figure> <p>And there you have it – a little Docker magic with the trusty sed line! It might not be the star of the show, but in the everyday chaos of Docker setups, it sure plays a solid supporting role. So, next time you’re tweaking your environment, give sed a nod – it’s your backstage pass to smoother, customized Docker adventures !</p>]]></content><author><name></name></author><category term="publications"/><category term="code"/><category term="docker"/><summary type="html"><![CDATA[Tuning other's packaged code to our fits]]></summary></entry><entry><title type="html">From Print to Pixel - Transforming Acronym Usage in Academic Writing</title><link href="https://dbonattoj.github.io/blog/2024/acronym-tooltips/" rel="alternate" type="text/html" title="From Print to Pixel - Transforming Acronym Usage in Academic Writing"/><published>2024-02-25T20:00:00+01:00</published><updated>2024-02-25T20:00:00+01:00</updated><id>https://dbonattoj.github.io/blog/2024/acronym-tooltips</id><content type="html" xml:base="https://dbonattoj.github.io/blog/2024/acronym-tooltips/"><![CDATA[<p>In the world of academic manuscripts, grappling with acronyms can be a real headache, especially when diving into papers from different fields. I recently found myself facing this issue, and the standard solutions weren’t quite cutting it.</p> <p>To tackle this issue, I explored the <a href="https://fr.overleaf.com/learn/latex/Glossaries"><code class="language-plaintext highlighter-rouge">glossaries</code></a> package, hoping it would be the solution I needed. However, it fell short of my expectations. While it did expand acronyms at their initial usage and offered a table generation feature, it was more tailored for printed material. Having to navigate between the table and the text wasn’t ideal, especially for someone like me who primarily engages with electronic materials. I was convinced there was room for improvement.</p> <p>Fortunately, after some digging, I stumbled upon a gem on <a href="https://tex.stackexchange.com/questions/199084/tooltip-with-glossary-items">Stack Exchange</a>. Inspired by someone else’s struggle, I tweaked the solution to fit my needs. The outcome? Perfect. Now, when I encounter an unfamiliar acronym in a PDF, a simple hover with the mouse reveals a tooltip with the full definition. Game-changer!</p> <p>I believe every research paper could benefit from this nifty utility, and this post is my call to action for fellow researchers to hop on the bandwagon.</p> <p>Implementation is a breeze – just add the following line to your <strong>main text file header</strong>:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\input</span><span class="p">{</span>acronyms<span class="p">}</span></code></pre></figure> <p>When you’re ready to use an acronym, like Reference View Synthesizer (RVS), simply write:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">Visual comparison between <span class="k">\tip</span><span class="p">{</span>rvs<span class="p">}</span> (4 and 8 input views) on zoomed details of [...] <span class="k">\tip</span><span class="p">{</span>rvs<span class="p">}</span> [...]</code></pre></figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/tooltip-480.webp 480w,/assets/img/posts/tooltip-800.webp 800w,/assets/img/posts/tooltip-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/tooltip.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>For plurals, try \tips, and for capital letters, go for \Tip{s}. Easy, right?</p> <p>Now, create an <code class="language-plaintext highlighter-rouge">acronyms.tex</code> file, a versatile copy-paste companion for all your papers. It not only houses the acronyms relevant to your field but also contains the nifty LaTeX code for seamless display.</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\usepackage</span><span class="na">[printonlyused]</span><span class="p">{</span>acronym<span class="p">}</span>
<span class="k">\usepackage</span><span class="na">[draft, author={}]</span><span class="p">{</span>pdfcomment<span class="p">}</span>

<span class="k">\usepackage</span>[hyperfirst=false,<span class="c">%sort=none,</span>
  acronym,nomain,shortcuts,toc,nogroupskip]<span class="p">{</span>glossaries<span class="p">}</span>
<span class="c">% https://tex.stackexchange.com/questions/199084/tooltip-with-glossary-items</span>
<span class="k">\usepackage</span><span class="p">{</span>xcolor<span class="p">}</span> <span class="c">% used for colored acronyms</span>

<span class="k">\renewcommand</span><span class="p">{</span><span class="k">\acs</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\acrshort*</span><span class="p">{</span>#1<span class="p">}}{</span><span class="k">\glsentrylong</span><span class="p">{</span>#1<span class="p">}}}</span>
<span class="k">\renewcommand</span><span class="p">{</span><span class="k">\acsp</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\acrshortpl*</span><span class="p">{</span>#1<span class="p">}}{</span><span class="k">\glsentrylongpl</span><span class="p">{</span>#1<span class="p">}}}</span>

<span class="k">\glsdisablehyper</span> <span class="c">% disable hyperlinks on all acronyms</span>

<span class="c">% Change list of acronyms name:</span>
<span class="c">%\renewcommand*{\acronymname}{List of Abbreviations}</span>

<span class="c">% Acronyms in colors</span>
<span class="c">%\definecolor{color1}{RGB}{73, 142, 41} % greenish</span>
<span class="c">%\definecolor{color2}{RGB}{17, 138, 178} % blue</span>
<span class="c">%\definecolor{color3}{RGB}{73, 142, 41} % greenish</span>
<span class="c">% Acronyms in black</span>
<span class="k">\definecolor</span><span class="p">{</span>color1<span class="p">}{</span>RGB<span class="p">}{</span>0, 0, 0<span class="p">}</span> <span class="c">% black</span>
<span class="k">\definecolor</span><span class="p">{</span>color2<span class="p">}{</span>RGB<span class="p">}{</span>0, 0, 0<span class="p">}</span> <span class="c">% black</span>
<span class="k">\definecolor</span><span class="p">{</span>color3<span class="p">}{</span>gray<span class="p">}{</span>0.30<span class="p">}</span> <span class="c">% gray</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\mygray</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\textcolor</span><span class="p">{</span>color3<span class="p">}{</span>#1<span class="p">}}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\mybold</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\textbf</span><span class="p">{</span><span class="k">\mygray</span><span class="p">{</span>#1<span class="p">}}}</span>

<span class="k">\newcommand</span><span class="p">{</span><span class="k">\accolor</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\textcolor</span><span class="p">{</span>color1<span class="p">}{</span>#1<span class="p">}}</span>
<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\glossfirstformat</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\accolor</span><span class="p">{</span>#1<span class="p">}}</span> <span class="c">% use to make first definition special format</span>

<span class="c">%https://tex.stackexchange.com/questions/232707/modify-appearance-of-first-acronym</span>
<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\acfirstformat</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\textcolor</span><span class="p">{</span>color2<span class="p">}{</span><span class="k">\textbf</span><span class="p">{</span>#1<span class="p">}}}</span>
<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\acplfirstformat</span><span class="p">}</span>[1]<span class="p">{</span><span class="k">\textcolor</span><span class="p">{</span>color2<span class="p">}{</span><span class="k">\textbf</span><span class="p">{</span>#1<span class="p">}}}</span>
<span class="k">\newacronymstyle</span><span class="p">{</span>myacro<span class="p">}</span>
<span class="p">{</span><span class="c">%</span>
  <span class="k">\GlsUseAcrEntryDispStyle</span><span class="p">{</span>long-short<span class="p">}</span><span class="c">%</span>
<span class="p">}</span><span class="c">%</span>
<span class="p">{</span><span class="c">%</span>
  <span class="k">\GlsUseAcrStyleDefs</span><span class="p">{</span>long-short<span class="p">}</span><span class="c">%</span>
  <span class="k">\renewcommand*</span><span class="p">{</span><span class="k">\genacrfullformat</span><span class="p">}</span>[1]<span class="p">{</span><span class="c">%</span>
    <span class="k">\glossfirstformat</span><span class="p">{</span><span class="k">\glsentrylong</span><span class="p">{</span>##1<span class="p">}}</span><span class="k">\space</span>
    (<span class="k">\acfirstformat</span><span class="p">{</span><span class="k">\glsentryshort</span><span class="p">{</span>##1<span class="p">}}</span>)<span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
  <span class="k">\renewcommand*</span><span class="p">{</span><span class="k">\Genacrfullformat</span><span class="p">}</span>[2]<span class="p">{</span><span class="c">%</span>
    <span class="k">\glossfirstformat</span><span class="p">{</span><span class="k">\Glsentrylong</span><span class="p">{</span>##1<span class="p">}}</span><span class="k">\space</span>
    (<span class="k">\glsentryshort</span><span class="p">{</span>##1<span class="p">}</span>)<span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
  <span class="k">\renewcommand*</span><span class="p">{</span><span class="k">\genplacrfullformat</span><span class="p">}</span>[2]<span class="p">{</span><span class="c">%</span>
    <span class="k">\glossfirstformat</span><span class="p">{</span><span class="k">\glsentrylongpl</span><span class="p">{</span>##1<span class="p">}}</span><span class="k">\space</span>
    (<span class="k">\acplfirstformat</span><span class="p">{</span><span class="k">\glsentryshort</span><span class="p">{</span>##1<span class="p">}}</span>)<span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
  <span class="k">\renewcommand*</span><span class="p">{</span><span class="k">\Genplacrfullformat</span><span class="p">}</span>[2]<span class="p">{</span><span class="c">%</span>
    <span class="k">\glossfirstformat</span><span class="p">{</span><span class="k">\Glsentrylongpl</span><span class="p">{</span>##1<span class="p">}}</span><span class="k">\space</span>
    (<span class="k">\glsentryshortpl</span><span class="p">{</span>##1<span class="p">}</span>)<span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
<span class="p">}</span>

<span class="k">\setacronymstyle</span><span class="p">{</span>myacro<span class="p">}</span>

<span class="c">% use for normal acronyms, gives them a PDF tooltip popup</span>
<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\tip</span><span class="p">}</span>[1]<span class="p">{</span><span class="c">% define our acronym command, make it short since we use it a lot,</span>
  <span class="c">% use * for so that it is only a 'short' command</span>
  <span class="k">\ifglsused</span><span class="p">{</span>#1<span class="p">}{</span><span class="c">% if we used it already, then put pdftooltip</span>
    <span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\accolor</span><span class="p">{</span><span class="k">\mybold</span><span class="p">{</span><span class="k">\glsentryshort</span><span class="p">{</span>#1<span class="p">}}}}{</span><span class="k">\glsentrydesc</span><span class="p">{</span>#1<span class="p">}}}</span><span class="c">%</span>
  <span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\gls</span><span class="p">{</span>#1<span class="p">}}</span><span class="c">% otherwise put the normal gls</span>
  <span class="p">}</span><span class="c">%</span>
<span class="p">}</span><span class="c">%</span>

<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\Tip</span><span class="p">}</span>[1]<span class="p">{</span><span class="c">%</span>
  <span class="k">\ifglsused</span><span class="p">{</span>#1<span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\accolor</span><span class="p">{</span><span class="k">\mybold</span><span class="p">{</span><span class="k">\Glsentryshort</span><span class="p">{</span>#1<span class="p">}}}}{</span><span class="k">\glsentrydesc</span><span class="p">{</span>#1<span class="p">}}}</span><span class="c">%</span>
  <span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\Gls</span><span class="p">{</span>#1<span class="p">}}</span><span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
<span class="p">}</span><span class="c">%</span>

<span class="c">% use for plural acronyms</span>
<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\tips</span><span class="p">}</span>[1]<span class="p">{</span><span class="c">%</span>
  <span class="k">\ifglsused</span><span class="p">{</span>#1<span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\accolor</span><span class="p">{</span><span class="k">\mybold</span><span class="p">{</span><span class="k">\glsentryshortpl</span><span class="p">{</span>#1<span class="p">}}}}{</span><span class="k">\glsentrydesc</span><span class="p">{</span>#1<span class="p">}}}</span><span class="c">%</span>
  <span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\glspl</span><span class="p">{</span>#1<span class="p">}}</span><span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
<span class="p">}</span><span class="c">%</span>

<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\Tips</span><span class="p">}</span>[1]<span class="p">{</span><span class="c">%</span>
  <span class="k">\ifglsused</span><span class="p">{</span>#1<span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\accolor</span><span class="p">{</span><span class="k">\mybold</span><span class="p">{</span><span class="k">\Glsentryshortpl</span><span class="p">{</span>#1<span class="p">}}}}{</span><span class="k">\glsentrydesc</span><span class="p">{</span>#1<span class="p">}}}</span><span class="c">%</span>
  <span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\Glspl</span><span class="p">{</span>#1<span class="p">}}</span><span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
<span class="p">}</span><span class="c">%</span>

<span class="c">% Forced short version in capital and without capital, for example to use in figure captions,</span>
<span class="c">% where we do not want to define the term if it appears for the first time there,</span>
<span class="c">% but we still want the tooltip.</span>
<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\Tipshort</span><span class="p">}</span>[1]<span class="p">{</span><span class="c">%</span>
  <span class="k">\ifglsused</span><span class="p">{</span>#1<span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\accolor</span><span class="p">{</span><span class="k">\mybold</span><span class="p">{</span><span class="k">\Glsentryshort</span><span class="p">{</span>#1<span class="p">}}}}{</span><span class="k">\glsentrydesc</span><span class="p">{</span>#1<span class="p">}}}</span><span class="c">%</span>
  <span class="p">}{</span><span class="c">%</span>
    <span class="k">\mybold</span><span class="p">{</span><span class="k">\acs</span><span class="p">{</span>#1<span class="p">}}</span><span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
<span class="p">}</span><span class="c">%</span>

<span class="k">\newcommand*</span><span class="p">{</span><span class="k">\tipshort</span><span class="p">}</span>[1]<span class="p">{</span><span class="c">%</span>
  <span class="k">\ifglsused</span><span class="p">{</span>#1<span class="p">}{</span><span class="c">%</span>
    <span class="p">{</span><span class="k">\pdftooltip</span><span class="p">{</span><span class="k">\accolor</span><span class="p">{</span><span class="k">\mybold</span><span class="p">{</span><span class="k">\glsentryshort</span><span class="p">{</span>#1<span class="p">}}}}{</span><span class="k">\glsentrydesc</span><span class="p">{</span>#1<span class="p">}}}</span><span class="c">%</span>
  <span class="p">}{</span><span class="c">%</span>
    <span class="k">\mybold</span><span class="p">{</span><span class="k">\acs</span><span class="p">{</span>#1<span class="p">}}</span><span class="c">%</span>
  <span class="p">}</span><span class="c">%</span>
<span class="p">}</span><span class="c">%</span>

<span class="k">\newacronym</span><span class="p">{</span>rvs<span class="p">}{</span>RVS<span class="p">}{</span>Reference View Synthesizer<span class="p">}</span></code></pre></figure> <p>Here is an <a href="https://www.overleaf.com/read/ftdtbqcrfgrd#11682c">Overleaf link</a> with a <strong>downloadable working example</strong>.</p> <p>Let’s empower every research paper with this tool – simple, effective, and a game-changer for both writers and readers alike! 🚀</p>]]></content><author><name></name></author><category term="publications"/><category term="formatting"/><category term="latex"/><summary type="html"><![CDATA[Papers just miss this kind of interactivity.]]></summary></entry></feed>